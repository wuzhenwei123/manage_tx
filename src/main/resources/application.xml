<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
	">
     
     <!-- 引入jdbc配置文件 -->  
     <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
               <value>classpath:config/*.properties</value>
               <value>classpath:log4j.properties</value>
                <!--要是有多个配置文件，只需在这里继续添加即可 -->
            </list>
        </property>
    </bean>

	<!-- DBCP DataSource数据源 -->
	<bean id="dataSourceMaster" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="name" value="masterDataSource" />
		<property name="url" value="${master.url}" />
		<property name="username" value="${master.username}" />
		<property name="password" value="${master.password}" />
		<property name="driverClassName" value="${master.driverClassName}" /> 
	
		<!-- 配置初始化大小、最小、最大 -->
		<!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialSize" value="5" />
		<!-- 连接池中保留的最小连接数 -->
		<property name="minIdle" value="3" />
		<!-- 连接池中保留的最大连接数。Default: 15 -->
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间,超时后将抛出 SQLException,如设为0则无限期等待。单位毫秒。Default: 	0 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<!-- 最大空闲时间,36000秒(10小时)内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 定期使用连接池内的连接，使得它们不会因为闲置超时而被 MySQL 断开 修复8小时问题。  -->
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开removeAbandoned功能 -->
		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="true" />
		<!-- 超时时间；单位为秒。60*60*2秒=2小时 -->  
		<property name="removeAbandonedTimeout" value="7200" />
		<!-- 关闭abanded连接时输出错误日志 -->  
		<property name="logAbandoned" value="true" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小,mysql 不使用 -->
		<property name="poolPreparedStatements" value="false" />
	</bean>
	<bean id="dataSourceSlave1" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="name" value="dataSourceSlave1" />
		<property name="url" value="${slave.url}" />
		<property name="username" value="${slave.username}" />
		<property name="password" value="${slave.password}" />
		<property name="driverClassName" value="${slave.driverClassName}" />

		<!-- 配置初始化大小、最小、最大 -->
		<!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialSize" value="5" />
		<!-- 连接池中保留的最小连接数 -->
		<property name="minIdle" value="3" />
		<!-- 连接池中保留的最大连接数。Default: 15 -->
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间,超时后将抛出 SQLException,如设为0则无限期等待。单位毫秒。Default: 	0 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<!-- 最大空闲时间,36000秒(10小时)内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 定期使用连接池内的连接，使得它们不会因为闲置超时而被 MySQL 断开 修复8小时问题。  -->
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开removeAbandoned功能 -->
		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="true" />
		<!-- 超时时间；单位为秒。60*60*2秒=2小时 -->  
		<property name="removeAbandonedTimeout" value="7200" />
		<!-- 关闭abanded连接时输出错误日志 -->  
		<property name="logAbandoned" value="true" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小,mysql 不使用 -->
		<property name="poolPreparedStatements" value="false" />
	</bean>

	<!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
			value="com.**.dao" />
	</bean>
	<bean id="dataSource" class="com.base.transactionDataSource.DynamicDataSource">
		<property name="writeDataSource" ref="dataSourceMaster" />
		<property name="readDataSourceList">
            <list>
                <ref bean="dataSourceSlave1" />
            </list>
        </property>
	</bean>
    <!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath*:com/*/*/sql/**/*.xml"/>  
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
	</bean>

	<!-- 自动扫描注解的bean -->
	<context:component-scan base-package="com.**.controller.**" />
	<context:component-scan base-package="com.**.service.**" />
	
	<!-- 定义单个jdbc数据源的事务管理器 -->
	<bean id="transactionManager" class="com.base.transactionDataSource.DynamicDataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 以 @Transactional 标注来定义事务  -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />		
	
	<!-- 配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="Exception" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="Exception" />
			<tx:method name="remove*" propagation="REQUIRED" read-only="false" rollback-for="Exception" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="Exception" />
			<tx:method name="proc*" propagation="REQUIRED" read-only="false" rollback-for="Exception" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 那些类的哪些方法参与事务 -->
	<aop:config>
		<aop:pointcut id="allManagerMethod" expression="execution(* com.*.*.service.*Service.*(..))" />
		<aop:advisor pointcut-ref="allManagerMethod" advice-ref="txAdvice" />
	</aop:config>
	
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
    	<!-- 线程池维护线程的最少数量 -->
	    <property name="corePoolSize" value="11" />
	    <!-- 线程池维护线程的最大数量 -->  
	    <property name="maxPoolSize" value="200" />
	    <!-- 线程池所使用的缓冲队列 -->  
	    <property name="queueCapacity" value="2000" />
	    <!-- 线程池维护线程所允许的空闲时间  单位秒--> 
	    <property name ="keepAliveSeconds" value ="30000" />  
	</bean>
	
	
	<context:component-scan base-package="com.tx.task" />
 	<task:scheduled-tasks>
 		<task:scheduled ref="taskJob" method="cut" cron="0 0 1 * * ?"/>   <!--每天凌晨1点触发  -->
 		<task:scheduled ref="taskJob" method="job5" cron="0 31 11 * * ?"/>   <!--每天凌晨1点触发  -->
 		<task:scheduled ref="taskJob" method="cut1" cron="0 0 3 * * ?"/>   <!--每天凌晨3点触发  -->
 	</task:scheduled-tasks>
	
<!-- 	<bean name="memcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder"> -->
<!--         <constructor-arg> -->
<!--             <list> -->
<!--                 <bean class="java.net.InetSocketAddress"> -->
<!--                     <constructor-arg> -->
<!--                         <value>${cache.ip}</value> -->
<!--                     </constructor-arg> -->
<!--                     <constructor-arg> -->
<!--                         <value>${cache.port}</value> -->
<!--                     </constructor-arg> -->
<!--                 </bean> -->
<!--             </list> -->
<!--         </constructor-arg> -->
<!--     </bean> -->
<!--     <bean name="memcachedClient" factory-bean="memcachedClientBuilder" factory-method="build" destroy-method="shutdown" /> -->
<!-- 	<bean id="memcacheUtil" class="com.base.utils.MemcacheUtil"> -->
<!-- 		<property name="memcachedClient" ref="memcachedClient" /> -->
<!-- 	</bean> -->
	
<!-- 	<bean id="getBankToMemcache" class="com.base.utils.GetBankToMemcache"></bean> -->
</beans>
